// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using favflicks.data;

#nullable disable

namespace favflicks.data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250710155340_AddMoreSeedDataForTesting")]
    partial class AddMoreSeedDataForTesting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieTag", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MovieTag");

                    b.HasData(
                        new
                        {
                            MoviesId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 1,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 2,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 3,
                            TagsId = 2
                        },
                        new
                        {
                            MoviesId = 4,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 4,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 5,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 5,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 6,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 7,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 7,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 8,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 9,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 9,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 10,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 11,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 11,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 12,
                            TagsId = 2
                        },
                        new
                        {
                            MoviesId = 12,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 13,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 13,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 14,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 15,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 15,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 16,
                            TagsId = 4
                        },
                        new
                        {
                            MoviesId = 16,
                            TagsId = 2
                        },
                        new
                        {
                            MoviesId = 17,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 18,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 19,
                            TagsId = 2
                        },
                        new
                        {
                            MoviesId = 19,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 20,
                            TagsId = 3
                        },
                        new
                        {
                            MoviesId = 20,
                            TagsId = 2
                        });
                });

            modelBuilder.Entity("favflicks.data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("favflicks.data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("favflicks.data.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("favflicks.data.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A thief uses dream-sharing technology to infiltrate minds.",
                            ImagePath = "/images/movies/inception.jpg",
                            Name = "Inception",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The aging patriarch of a crime dynasty transfers control to his son.",
                            ImagePath = "/images/movies/godfather.jpg",
                            Name = "The Godfather",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Two teens navigate friendship and parties before college.",
                            ImagePath = "/images/movies/superbad.jpg",
                            Name = "Superbad",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A hacker learns about the true nature of his reality.",
                            ImagePath = "/images/movies/matrix.jpg",
                            Name = "The Matrix",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A team travels through a wormhole in space to ensure humanity's survival.",
                            ImagePath = "/images/movies/interstellar.jpg",
                            Name = "Interstellar",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The lives of criminals intertwine in this nonlinear story.",
                            ImagePath = "/images/movies/pulpfiction.jpg",
                            Name = "Pulp Fiction",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Batman faces his greatest challenge in the form of the Joker.",
                            ImagePath = "/images/movies/darkknight.jpg",
                            Name = "The Dark Knight",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A man's simple outlook leads him through incredible life events.",
                            ImagePath = "/images/movies/forrestgump.jpg",
                            Name = "Forrest Gump",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Earth's mightiest heroes must unite to save the world.",
                            ImagePath = "/images/movies/avengers.jpg",
                            Name = "The Avengers",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A romance unfolds aboard the ill-fated RMS Titanic.",
                            ImagePath = "/images/movies/titanic.jpg",
                            Name = "Titanic",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A betrayed Roman general seeks revenge.",
                            ImagePath = "/images/movies/gladiator.jpg",
                            Name = "Gladiator",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Toys come to life when humans aren't around.",
                            ImagePath = "/images/movies/toystory.jpg",
                            Name = "Toy Story",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A theme park suffers a major security breakdown with dinosaurs.",
                            ImagePath = "/images/movies/jurassicpark.jpg",
                            Name = "Jurassic Park",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Two imprisoned men bond over the years.",
                            ImagePath = "/images/movies/shawshank.jpg",
                            Name = "The Shawshank Redemption",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 15,
                            Description = "A lion cub's journey to reclaim his kingdom.",
                            ImagePath = "/images/movies/lionking.jpg",
                            Name = "The Lion King",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A teenager travels back in time to help his parents.",
                            ImagePath = "/images/movies/backtothefuture.jpg",
                            Name = "Back to the Future",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 17,
                            Description = "The story of Facebook's founding.",
                            ImagePath = "/images/movies/socialnetwork.jpg",
                            Name = "The Social Network",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 18,
                            Description = "An office worker forms an underground fight club.",
                            ImagePath = "/images/movies/fightclub.jpg",
                            Name = "Fight Club",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 19,
                            Description = "A boy journeys to the Land of the Dead to uncover family secrets.",
                            ImagePath = "/images/movies/coco.jpg",
                            Name = "Coco",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = 20,
                            Description = "A jazz musician and an aspiring actress fall in love.",
                            ImagePath = "/images/movies/lalaland.jpg",
                            Name = "La La Land",
                            UserId = "00000000-0000-0000-0000-000000000000"
                        });
                });

            modelBuilder.Entity("favflicks.data.Models.MovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieRatings");
                });

            modelBuilder.Entity("favflicks.data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("favflicks.data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("favflicks.data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("favflicks.data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("favflicks.data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieTag", b =>
                {
                    b.HasOne("favflicks.data.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("favflicks.data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("favflicks.data.Models.Comment", b =>
                {
                    b.HasOne("favflicks.data.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("favflicks.data.Models.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("favflicks.data.Models.Favorite", b =>
                {
                    b.HasOne("favflicks.data.Models.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("favflicks.data.Models.AppUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("favflicks.data.Models.Movie", b =>
                {
                    b.HasOne("favflicks.data.Models.AppUser", "User")
                        .WithMany("Movies")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("favflicks.data.Models.MovieRating", b =>
                {
                    b.HasOne("favflicks.data.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("favflicks.data.Models.AppUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("favflicks.data.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Movies");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("favflicks.data.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
